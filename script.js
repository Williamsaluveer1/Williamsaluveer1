// Variabeldeklarationer
const chatbotToggler = document.querySelector(".chatbot-toggler");
const closeBtn = document.querySelector(".close-btn");
const chatbox = document.querySelector(".chatbox");
const chatInput = document.querySelector(".chat-input textarea");
const sendChatBtn = document.querySelector(".chat-input span");
let userMessage = null;
const inputInitHeight = chatInput.scrollHeight;
let awaitingHumanConfirmation = false; // Flagga f칬r bekr칛ftelse

// Funktion f칬r att k칛nna igen jakande svar
function isAffirmativeResponse(message) {
  const affirmativeResponses = [
    "ja", "japp", "absolut", "sj칛lvklart", "g칛rna", "okej", "ok", "yes", "ja tack", "visst", "det st칛mmer", "javisst", "det vill jag", "s친klart", "precis"
  ];
  const lowerCaseMessage = message.toLowerCase();
  return affirmativeResponses.some(response => lowerCaseMessage.includes(response));
}

// Funktion f칬r att koppla anv칛ndaren till WhatsApp
function connectToWhatsApp() {
  const whatsappNumber = "46701234567"; // Ers칛tt med ditt nummer
  const message = encodeURIComponent("Hej, jag beh칬ver hj칛lp.");
  const whatsappLink = `https://wa.me/${whatsappNumber}?text=${message}`;

  const incomingChatLi = document.createElement("li");
  incomingChatLi.classList.add("chat", "incoming");
  incomingChatLi.innerHTML = `
    <span class="material-symbols-outlined">smart_toy</span>
    <p>V칛nligen klicka p친 l칛nken f칬r att chatta med en m칛nsklig kollega via WhatsApp: <a href="${whatsappLink}" target="_blank">Chatta p친 WhatsApp</a></p>
  `;
  chatbox.appendChild(incomingChatLi);
  chatbox.scrollTo(0, chatbox.scrollHeight);
}

// Uppdaterad handleChat-funktion
const handleChat = () => {
  userMessage = chatInput.value.trim();
  if (!userMessage) return;

  addMessageToHistory("user", userMessage);

  chatInput.value = "";
  chatInput.style.height = `${inputInitHeight}px`;

  chatbox.appendChild(createChatLi(userMessage, "outgoing"));
  chatbox.scrollTo(0, chatbox.scrollHeight);

  if (awaitingHumanConfirmation) {
    awaitingHumanConfirmation = false;

    if (isAffirmativeResponse(userMessage)) {
      const incomingChatLi = createChatLi("Jag kopplar dig nu till en m칛nsklig kollega.", "incoming");
      chatbox.appendChild(incomingChatLi);
      chatbox.scrollTo(0, chatbox.scrollHeight);

      connectToWhatsApp();
      return;
    } else {
      const incomingChatLi = createChatLi("Okej, l친t mig veta om jag kan hj칛lpa dig med n친got annat.", "incoming");
      chatbox.appendChild(incomingChatLi);
      chatbox.scrollTo(0, chatbox.scrollHeight);
      return;
    }
  }

  setTimeout(() => {
    const incomingChatLi = createChatLi("Skriver...", "incoming");
    chatbox.appendChild(incomingChatLi);
    chatbox.scrollTo(0, chatbox.scrollHeight);
    generateResponse(incomingChatLi);
  }, 600);
};

// Uppdaterad generateResponse-funktion
const generateResponse = async (chatElement) => {
  const messageElement = chatElement.querySelector("p");

  if (!checkInternetConnection()) {
    handleOfflineResponse(chatElement);
    return;
  }

  const requestOptions = {
    method: "POST",
    headers: { 
      "Content-Type": "application/json",
      "Authorization": `Bearer ${API_KEY}`  
    },
    body: JSON.stringify({
      model: "gpt-4",
      messages: previousMessages,
      max_tokens: 100 
    })
  };

  try {
    const response = await fetch(API_URL, requestOptions);
    const data = await response.json();
    if (!response.ok) throw new Error(data.error.message);

    let aiReply = data.choices[0].message.content;
    const lowerCaseReply = aiReply.toLowerCase();

    const uncertainKeywords = [
      "jag 칛r ledsen",
      "tyv칛rr",
      "jag vet inte",
      "kan tyv칛rr inte",
      "f칬rst친r inte",
      "beklagar",
      "os칛ker",
      "har inget svar",
      "kan inte hj칛lpa",
      "inte svar",
      "p친 din fr친ga",
      "du inte fick",
      "koppla dig",
      "kopplar dig",
      "jag ska koppla",
      "칬verf칬r dig",
      "ansluter dig",
      "jag fixar en m칛nniska",
      "v칛nta medan jag",
      "koppla till m칛nniska",
      "riktig person",
      "m칛nsklig operat칬r",
      "jag hj칛lper dig att",
      "l친t mig h칛mta",
      "beh칬ver hj칛lp av en m칛nniska",
      "kan inte svara p친 det",
      "vill du prata med en m칛nniska",
      "kontakta support",
      "kontakta kundtj칛nst",
      "jag kan inte besvara",
      "inte s칛ker p친 svaret",
      "kan inte ge information",
      "kan inte f칬rst친",
      "l친t mig koppla dig",
      "f친r inte fram ett svar",
      "jag saknar information",
      "min kunskap r칛cker inte",
      "h칛nvisar dig till en m칛nniska",
      "assistera dig",
      "koppla till",
      "prata med",
      "kontaktar oss",
      "kontakta oss",
    ];
    

    const isUncertain = uncertainKeywords.some(keyword => lowerCaseReply.includes(keyword));

    if (isUncertain) {
      aiReply = "Vill du att jag kopplar dig till en m칛nsklig kollega nu? Ja/Nej";
      awaitingHumanConfirmation = true; // S칛tter flaggan
    }

    messageElement.textContent = aiReply;
    addMessageToHistory("assistant", aiReply);

  } catch (error) {
    messageElement.classList.add("error");
    messageElement.textContent = error.message;
  } finally {
    chatbox.scrollTo(0, chatbox.scrollHeight);
  }
};

// Resten av din kod f칬r eventlisteners och funktioner
// ...



// Variabel f칬r att lagra tidigare meddelanden
let previousMessages = [
  { role: "system", content: "Anv칛nd emojis. Du 칛r AI-assistent gjord av SmartChat till en webbplats som tillh칬r SmartChat och du  ska hj칛lpa kunder med fr친gor g칛llande f칬retaget SmartChat och inget annat. Det 칛r ytterst viktigt att du svarar med professionalism i din formulering p친 skrivarens fr친gor. Kort och koncist, entusiastiskt och sporrande. Mycket viktigt att du inte heller svarar p친 andra irrelevanta fr친gor som skrivare kanske st칛ller dig. H친ll dig alltid till f칬retaget och f칬rs칬k att byta tillbaka samtals칛mnet lugnt och sn칛llt, lite entusiastiskt! N칛r skrivare fr친gar vad SmartChat 칛r r칛cker det med en snabb pitch om vad vi s칛ljer och hur en eventuell k칬pare kan dra till f칬rdel av produkten. Om du f친r fr친gor om v친ran integritetspolicy kan du antingen v칛nligt h칛nvisa till v친r flik p친 v친r webbplats eller vid specifika fr친gor 칛ven ber칛tta  hur vi st칛ller oss innan v칛nligt h칛nvisa vidare till v친ran flik p친 webbplatsen. SmartChat 칛r ett f칬retag startat av tre unga entrepren칬rer som heter William Saluveer, Simon Futtrup och Elliot Von B칬rtzell. SmarChat jobbar med att utveckla skr칛ddarsydda AI chatbotar till f칬retags hemsidor f칬r att f칬renkla och simplifiera kundservice delen mellan f칬retag och kund. Vi har allts친 st칬tt p친 ett problem som konsumenter. Det tar f칬r l친ng tid att f친 svar i telefon. Det 칛r jobbiga telefonk칬 칬ppettider. Man ska v칛nta i tv친 dygn f칬r att f친 svar p친 mail osv. Med en implementerad AI chatbot p친 en f칬retagssida kan kunder allts친 st칛lla fr친gor om sina ordrar eller allm칛nna fr친gor om f칬retaget dygnet runt utan l친nga svarstider. Boten kan 칛ven koppla till en riktig person om 칛rendet i fr친ga antingen 칛r lite speciellt, boten inte ger ett tillfredsst칛llande svar eller om det bara 칛r en preferens sak att tala med riktig person. Alla botar 칛r skr칛ddarsydda till alla enskilda f칬retag till deras specifika preferenser. SmartChat 칛r ansvarig f칬r behandlingen av personuppgifter enligt denna policy, och du kan kontakta oss via e-post p친 hej@smartchat.se om du har fr친gor.Vi samlar in personuppgifter som f칬retags-e-postadresser, telefonnummer till ansvariga f칬r kundsupport eller e-handel, information om f칬retagens produkter f칬r att anpassa v친ra AI-botar, samt webbplatsinformation f칬r att effektivt kunna besvara fr친gor om produkter och ordrar.SmartChat samlar endast in och hanterar information som r칬r f칬retagskunder i syfte att f칬rb칛ttra aff칛rsrelationer och kundupplevelser. Konsumentdata hanteras av v친ra kunder enligt deras dataskyddspolicy." }
];

// OpenAI API-konfiguration
const API_KEY = "sk-NY6tXnSCbqzMyL3e1Aem9Rxj_-0Ep9r3NjOKkVs2YST3BlbkFJ_8TDtcw8matCu_2DZUu5H8vi8BzEtCxFxw0Vw1asAA"; // Ers칛tt med din OpenAI API-nyckel
const API_URL = "https://api.openai.com/v1/chat/completions";

// Funktion f칬r att l칛gga till nya meddelanden till konversationens historik
const addMessageToHistory = (role, content) => {
  previousMessages.push({ role: role, content: content });
}

// Funktion f칬r att kontrollera om anv칛ndaren har internetanslutning
const checkInternetConnection = () => {
  return navigator.onLine;
};

// Funktion f칬r att hantera offline-svar
const handleOfflineResponse = (chatElement) => {
  const offlineResponse = "Tyv칛rr, du 칛r offline. F칬rs칬k igen n칛r du har internetanslutning.";
  chatElement.querySelector("p").textContent = offlineResponse;
};

// Funktion f칬r att generera svar fr친n OpenAI API



// Funktion f칬r att styla knapparna
const styleButton = (button) => {
  button.style.backgroundColor = "#333";
  button.style.color = "#fff";
  button.style.border = "none";
  button.style.padding = "8px 16px";
  button.style.borderRadius = "5px";
  button.style.cursor = "pointer";
  button.style.fontSize = "0.9rem";
  button.style.transition = "background-color 0.3s ease";
  button.style.flex = "1"; // F칬r att knapparna ska dela utrymme j칛mnt

  // Hover-effekt
  button.addEventListener("mouseover", () => {
      button.style.backgroundColor = "#e69500";
  });
  button.addEventListener("mouseout", () => {
      button.style.backgroundColor = "#333";
  });
}

const handleYesResponse = () => {
  const confirmationMessage = createChatLi("Tack f칬r din 친terkoppling! 游땕", "incoming");
  chatbox.appendChild(confirmationMessage);
  chatbox.scrollTo(0, chatbox.scrollHeight);
}

const handleNoResponse = () => {
  const followUpQuestion = createChatLi("Jag ber om urs칛kt f칬r detta. Vad kan jag hj칛lpa dig med ytterligare?", "incoming");
  chatbox.appendChild(followUpQuestion);
  chatbox.scrollTo(0, chatbox.scrollHeight);
}









// Funktion f칬r att skicka ett f칬rslag fr친n bubblor
const sendSuggestion = (suggestion) => {
  if (!checkInternetConnection()) {
    const incomingChatLi = createChatLi("Tyv칛rr, du 칛r offline. F칬rs칬k igen n칛r du har internetanslutning.", "incoming");
    chatbox.appendChild(incomingChatLi);
    return;
  }

  // Skicka f칬rslaget som ett meddelande
  chatInput.value = suggestion;
  handleChat();
}

// Eventlistener f칬r att hantera input
chatInput.addEventListener("input", () => {
  chatInput.style.height = `${inputInitHeight}px`;
  chatInput.style.height = `${chatInput.scrollHeight}px`;
});

// Hantera Enter-tangenten f칬r att skicka meddelande
chatInput.addEventListener("keydown", (e) => {
  if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
    e.preventDefault();
    handleChat();
  }
});

// Klickh칛ndelse f칬r att skicka meddelande
sendChatBtn.addEventListener("click", handleChat);

// St칛ng chattboten
closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));

// Visa eller g칬m chattboten
chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));

// Funktion f칬r att skapa en chat <li> element
const createChatLi = (message, className) => {
  const chatLi = document.createElement("li");
  chatLi.classList.add("chat", `${className}`);
  let chatContent = className === "outgoing" 
    ? `<p></p>` 
    : `<span class="material-symbols-outlined">smart_toy</span><p></p>`;
  
  chatLi.innerHTML = chatContent;
  chatLi.querySelector("p").textContent = message;
  return chatLi;
};




const clearChat = () => {
  // Visa modalen f칬r bekr칛ftelse
  const modal = document.getElementById("delete-confirmation-modal");
  modal.style.display = "block";

  // Eventlistener f칬r bekr칛ftelseknappen
  document.getElementById("confirm-delete").addEventListener("click", () => {
    // Radera konversationen
    chatbox.innerHTML = "";

    // 칀terst칛ll meddelandehistoriken till startv칛rdet
    previousMessages = [
      { role: "system", content: "Du ska vara v칛ldigt trevlig och hj칛lpsam, du svara p친 kundernas fr친gor..." }
    ];

    // L칛gg till det initiala v칛lkomstmeddelandet
    const welcomeMessage = createChatLi("Hej! V칛lkommen till Prydligt.se!游녦 Hur kan jag hj칛lpa dig idag?", "incoming");
    chatbox.appendChild(welcomeMessage);

    // L칛gg tillbaka f칬rslagsknapparna
    const suggestions = document.createElement("div");
    suggestions.classList.add("suggestions");
    suggestions.innerHTML = `
      <button onclick="sendSuggestion('Vad kostar en AI Chattbot?')">Vad kostar en AI Chattbot?</button>
      <button onclick="sendSuggestion('Hur ser ni p친 s칛kerhet?')">Hur ser ni p친 s칛kerhet?</button>
      <button onclick="sendSuggestion('Hur gynnar den min verksamhet?')">Hur gynnar den min verksamhet?</button>
    `;
    chatbox.appendChild(suggestions);

    // L칛gg till "Skapad av Smartchat"-l칛nken
    const createdBy = document.createElement("div");
    createdBy.classList.add("created-by");
    createdBy.innerHTML = `<p>Skapad av <a href="https://www.smartchat.se" target="_blank">Smartchat</a></p>`;
    chatbox.appendChild(createdBy);

    // L칛gg till "Chatten har raderats"-meddelandet
    const clearMessage = document.createElement("div");
    clearMessage.classList.add("clear-message");
    clearMessage.textContent = "Chatten har raderats.";
    chatbox.appendChild(clearMessage);

    // Skrolla till botten
    chatbox.scrollTo(0, chatbox.scrollHeight);

    // Starta fade out efter 3 sekunder
    setTimeout(() => {
      clearMessage.classList.add('fade-out');
    }, 1000);

    // Ta bort meddelandet helt efter att fade out 칛r klar (5 sekunder)
    setTimeout(() => {
      clearMessage.remove();
    }, 5000);

    // St칛ng modalen
    modal.style.display = "none";
  });

  // Eventlistener f칬r avbrytknappen
  document.getElementById("cancel-delete").addEventListener("click", () => {
    // St칛ng modalen om anv칛ndaren avbryter
    modal.style.display = "none";
  });
};

// Funktion f칬r att hantera Ja eller Nej svar
function handleYesNoResponse(response) {
  // Hantera logiken f칬r Ja eller Nej svar h칛r
  console.log("Anv칛ndaren valde:", response);
  
  // Du kan l칛gga till ytterligare logik beroende p친 svaret
  if (response === "Ja") {
    // Logik f칬r Ja
  } else {
    // Logik f칬r Nej
  }
}

function isAffirmativeResponse(message) {
  const affirmativeResponses = [
    "ja", "japp", "absolut", "sj칛lvklart", "g칛rna", "okej", "ok", "yes", "ja tack", "visst", "det st칛mmer", "javisst", "det vill jag", "s친klart", "precis"
  ];
  const lowerCaseMessage = message.toLowerCase();
  return affirmativeResponses.some(response => lowerCaseMessage.includes(response));
}
